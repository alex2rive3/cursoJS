/////////////////////////////////////////////////////////////
document.etiqueta a acceder
/////////////////////////////////////////////////////////////
de esta manera tambien podemos acceder al contenido de algunas cosas como por ejemplo el body, title, images, links entre otras 

/////////////////////////////////////////////////////////////
Document.documentElement()
/////////////////////////////////////////////////////////////
Este es un selector de etiqueta html

/////////////////////////////////////////////////////////////
document.getSelection()
/////////////////////////////////////////////////////////////
esta funcion es utilizada para seleccionar el texto de una pagina 

/////////////////////////////////////////////////////////////
document.write()
/////////////////////////////////////////////////////////////
esto es para escribir en el documento html pero lo que escribe se posiciona al final del documento 

/////////////////////////////////////////////////////////////
Nodos, Elementos y Selectores 
/////////////////////////////////////////////////////////////
Nodo = Un nodo en el DOM es cualquier etiqueta del cuerpo, como un párrafo, el mismo body o 
incluso las etiquetas de una lista. Con Javascript podemos modificar estas etiquetas con el uso de eventos.
/////////////////////////////////////////////////////////////
SELECTORES 
Estos selectores pueden ser los siguiente 
##document.getElementsByTagName("tag html")
con esto se selecciona todos los elemetos con la etiqueta deceada 

##document.getElementsByClassName("nombre de la clase")
esto devolvera una lista completa de todos los elementos que tengan la clase que buscas

##document.getElementsByName("nombre del imput")
con estos seleccionamod un elemento por su nombre, esto ya es para seleccionar elementos espesificos porque muy dificilmente tendras dos elementos con el mismo nombre 

##document.getElementsById("nombre de id")
esto es para seleccionar un solo elemento del documento devido a que el id es un identificador unico 

##document.querySelector("cualquier selector valido")
El query selector solo devuele el primer elemento que encuentra pero se puede buscar de la menera que a uno mejor
 le parezca, en caso que vayas a buscar un id le debes de indicar de la siguiente manera ("#nombre del id")

##document.querySelectorAll("cualquier selector valido")
es para que retorne todos los elementos que coinsidan con la busqueda, puede ser tag, name, class, entre otros
Al utilizar el document.querySelectorAll() tambien se le puede aplicar una funcion como puede ser el forEach o cualqueir otro valido

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
Es una buena practica declarar las variables que obtienen datos del dom con el signo del dolar delante ($variable) para 
de este modo diferenciar en un documento cuales son variables logicos y cuales estan obteniendo datos del dom para modificarlas o eliminarlas 
/////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////
ATRIBUTOS Y DATA-ATRIBUTOS
/////////////////////////////////////////////////////////////
##document.documentElement.setAtribute("atributo a seleccionar")
esto es para averiguar el valor que contiene un atributo 

##document.documentElement.setAtribute("atributo a seleccionar","nuevo valor")
esto es para cambiar el valor del atributo en cuestion 

###########################################
data-attribute
############################################
Los atributos data-* permiten almacenar información adicional sobre un elemento HTML cualquiera sin tener que recurrir a artilugios tales como la utilización de atributos no estándar, propiedades adicionales en el DOM o Node

/////////////////////////////////////////////////////////////
Estilos y Variables CSS
/////////////////////////////////////////////////////////////
##getComputedStyle(elemento del DOM)
esto devuelve una lista completa de todos los estilos css que se pueden aplicar al elemento

##getComputedStyle(elemento del DOM).getPropertyValue("propiedad css")
este metodo devolvera el valor de la propiedad que tiene el elemento que estamos buscando 

/////////////////////////////////////////////////////////////
PARA MODIFICAR EL VALOR DE UNA PROPIEDAD CSS SE PUEDE HACER DE DOS MANERAS
##Por notacion de puntos 
$variableQueContieneElElemento.style.propiedadCss="valor deceado"
EJEMPLO 
$linkDom.style.width="50%"

##Y accedienddo a ella de la siguiente manera 
$variable.style.setAtribute("propiedad css","valor")

/////////////////////////////////////////////////////////////
CLASES CSS DESDE JS
/////////////////////////////////////////////////////////////
Usar "classList" es una forma práctica de acceder a la lista de clases de un elemento como una cadena de texto delimitada

La propiedad devuelve una colección activa de los atributos de clase del elemento.

FUNCIONES QUE PUEDE CUMPLIR 
##add("clase") agregar las clases indicadas en caso que ya tenga la clase sera ignorada

##remove("clase")eliminara la clase en caso que esta no exista no dara ningun error

##toggle("clase") esta en caso que la clase exista la elimina y retorna flase y en caso que no exista lo añade y retorna true

##contains("clase") esto compruebas si es que la clase indicada existe en el atributo de clase del elemento

##replace("clase vieja","clase nueva")esta funcion reemplaza un funcion por otra 

//////////////////////////////////////////////////////////////
TEXTO Y HTML
/////////////////////////////////////////////////////////////
La mejor forma de agregar un texto que contiene etiquetas html al documento es por medio de la funcion ""innerHTML""
EJEMPLO 
$variableDelDiv.innerHTML=texto que se quiere agregar 

/////////////////////////////////////////////////////////////
RECORRIENDO EL DOM
/////////////////////////////////////////////////////////////
const $card = document.querySelector("card")
estamos seleccioando un elemento por medio de una clase que es card 

$card.children esto retorna todos los elementos hijos del elemento seleccionado 

$card.children[1] esto es utilizado si queremos acceder a un hijo espesificamente 

$card.firstElementChild esto es para saber cual es primer elemeto hijo del elemento seleccionado 

$card.lastElementChild esto es para saber cual el ultimo elemeto hijo del elemento seleccionado

$card.previousElementSibling esto es para saber cual es el elemeto hermano previo del elemento seleccionado

$card.nextElementSibling esto es para saber cual es el elemeto hermano siguiente del elemento seleccionado

$card.parentElement con esto nos dira cual es elemento padre del elemento seleccionado 

/////////////////////////////////////////////////////////////
CREANDO ELEMENTOS Y FRACMENTOS  
/////////////////////////////////////////////////////////////
##document.createElement("tag a crear")
esta funcion es para crear un nuevo elemento en el documento 
como podria ser un div nuevo o una foto o cualquier cosas que se te sea necesario 

##document.createTextNode("texto a agregar")
esto es para crear un nuevo nodo de texto para un elemento

Para agregar los elemento creados es necesario seleccionar el tag despues del cual sera insertado 
y para insertar se utilza la funcion 
##$nodoSeleccionado.appendChild($variable que tiene el elemento creado)

/////////////////////////////////////////////////////////////
TEMPLATES HTML
/////////////////////////////////////////////////////////////
Este es un modelo a seguir que tiene en el cual la estructura es el contenido html que quieras generar con js de manera dinamica

En el html lo que hay que agregar es una estructura coomo la siguiente que luego sera completadas por medio de js
<template id="template-card">
    <figure class="card">
      <img>
      <figcaption></figcaption>
    </figure>
  </template>

En js haremos lo siguiente para ir rellenando 

const $cards = document.querySelector(".cards"),
  $template = document.getElementById("template-card").content,
  $fragment = document.createDocumentFragment(),
  cardsContent = [
    {
      title: "Tecnología",
      img: "https://placeimg.com/200/200/tech",
    },
    {
      title: "Animales",
      img: "https://placeimg.com/200/200/animals",
    },
    {
      title: "Arquitectura",
      img: "https://placeimg.com/200/200/arch",
    },
    {
      title: "Gente",
      img: "https://placeimg.com/200/200/people",
    },
    {
      title: "Naturaleza",
      img: "https://placeimg.com/200/200/nature",
    },
  ];
cardsContent.forEach((el) => {
  $template.querySelector("img").setAttribute("src", el.img);
  $template.querySelector("img").setAttribute("alt", el.title);
  $template.querySelector("figcaption").textContent = el.title;
  let $clone = document.importNode($template, true);
  $fragment.appendChild($clone);
});
$cards.appendChild($fragment);

/////////////////////////////////////////////////////////////
CLONAR ESTRUCTURAS HTML O TEMPLATE HTML 
/////////////////////////////////////////////////////////////
Para clona la estuctura o templete html se utiliza la siguinte funcio que es 
##document.importNode("variable de la estructura o template", true)
el segundo paramentro siempre debe ser true para que pueda clonar por completo la estructura o template

/////////////////////////////////////////////////////////////
Modificando elementos COOL STYLE
/////////////////////////////////////////////////////////////
.insertAdjacent...
  .insertAdjacentElement(position, el) esto es para inserta un nuevo elemento 
  .insertAdjacentHTML(position, html) es para agregar contenido html 
  .insertAdjacentText(position, text) y por ultimo este es utilizado para areagr texto 

en cuando a la posicion de las funciones anteriores puede tomar los siguientes valores
Posiciones:
  beforebegin(hermano anterior)
  afterbegin(primer hijo)
  beforeend(ultimo hijo)
  afterend(hermano siguiente)

const $cards = document.querySelector(".cards"),
  $newCard = document.createElement("figure");
let $contenCard = `
  
  <img src="https://placeimg.com/200/200/any" alt="Any">
  <figcaption></figcaption>
`;
$newCard.classList.add("card");
$newCard.insertAdjacentHTML("afterbegin", $contenCard);
$cards.insertAdjacentElement("beforeend", $newCard);
$newCard.querySelector("figcaption").insertAdjacentText("afterbegin", "Any"); */

/////////////////////////////////////////////////////////////
MANEJADORES DE EVENTOS 
/////////////////////////////////////////////////////////////
Hay tres maneras de definir los eventos en JS
La primera formas es 

Teniendo un evento como propiedad en una etiqueta html por ejemplo
<button onclick="escribir codigo js a ejecutar o llamar a funcion">Evento atributo html</button>

La segunda forma es con un manejador semantico 
en html
<button id= "evento_Semantico">Evento con manejador semantico</button>

en js
obtenemos el boton y lo guardamos en una variable 

##const function holaMundo(){
  alert("Hola Mundo");
}

##const $eventoSemantico = document.getElementById("evento_Semantico")
##$eventoSemantico.onclick = holaMundo;

cuando vayamos a utilzar funciones con manejadores emantico no se debe usar los parentesis 
solo se iguala el evendo a la funcion 

los manejadores semantico solo pueden realizar una funcion 
$eventoSemantico.onclick =function(){
  alert("Hola mundo desde el manejador semantico");
}
Para definir varias funciones a un mismo evento se utilizan los manejadore Multiples 
Los Manejadores Multiples son los que usan los escuchadores u observers como se le quiera llamar

addEventListener() este es el escuchar u obserever del evento que deceamos realizar 
Un manejador se declara de la siguiente manera 

este funcion puede recibir varios paramentos pero los mas importantes son dos 
El tipo de evento(click, change, close, ect)

Y el Otro es la funcion que se va a ejecutares muy importante que esta no tenga los parentesis

$eventoMultiple.addEventListener(click, holaMundo);
$eventoMultiple.addEventListener(click, (e)=>{
  alert("Hola mundo manejador multiple")
});

(e) es el objeto event que contiene todas las informaciones de los eventos 
e.type retorna cual fue el tipo de evento que se acaba de disparar
e.target este retornta el elemento que detono la accion 

/////////////////////////////////////////////////////////////
EVENTOS CON PARAMETRO Y REMOVER EVENTOS 
/////////////////////////////////////////////////////////////
function saludar(nombre = "desconocido/a"){
  alert(´Hola ${nombre}´)
}
Para pasar un parametro a alguan funcion que tiene que ser ejecutada con un evento se realiza de la siguiente menera

se realiza una arrown function para que esta sea el manejador y pueda llamar a la funcion que tiene que recibir los parametros 
y funcione correctamente 

$eventoMultiple.addEventListener(click,() => {saludar("Alex")});

Para remover un evento se realiza de la siguiente manera
Para eliminar una funcion asociada a un evento esta tiene que estar guardad ya sea en una funcion declarada o expresada
$eventoMultiple.removeEventListener(dblclick, funcionque tiene esta asociado al evento);


/////////////////////////////////////////////////////////////
FLUJO DE EVENTOS (BURBUJA Y CAPTURA)
/////////////////////////////////////////////////////////////
El flujo de eventos 
Principalmente hay dos manera que podemos trabajar su propagacion 

El Flujo Burbuje es el que se empieza a propagar desde el elemento mas interno hacia el exterior

En este caso vamos a agragar eventos a una lista dinamica

const $divsEventos = document.querySelectorAll(".eventos-flujo div");

function flujoEventos(e) {
  console.log(
    `Hola te saluda ${this.className}, el click lo originó ${e.target.className}`
  );
}
 Aca estamos recorriendo la lista de div que retorno el querySelector para agregarles el evento de manera automatica y dinamica
$divsEventos.forEach((div) => {
  //Fase de burbuja
  
  //div.addEventListener("click", flujoEventos);
  El tercer parametro por default es false lo que significa que el evento se detonara en forma de burbuja de adentro para afuera 
  y en caso que sea true se detonara en modo captura de afuera hacia el centro 
  //div.addEventListener("click", flujoEventos, false);
  //Fase de captura

  //div.addEventListener("click", flujoEventos, true);
  //el tercer parametro tambien puede ser un objeto y puede tener funciones extra  
  div.addEventListener("click", flujoEventos, {
    capture: false,
    //esto es para que el evento solo se ejecute una vez
    once: true,
  });
});

/////////////////////////////////////////////////////////////
STOP PROPAGACION Y PREVENTDEFAULT
/////////////////////////////////////////////////////////////
esto por ejemplo sirve caundo le agregas un evento a un link y al ejecutar esta sentencia no abrira el sitio indicado en el link 
e.preventDefault()

esto es para que se ejecute solo el evento de un elemento y no se propague en ningun sentido
e.stopPropagation()  

/////////////////////////////////////////////////////////////
Delegacion de Eventos 
/////////////////////////////////////////////////////////////
Esto es utilizado para poner un evento a un elemnto padre así se va delegando el evento recorriendo todos los nodos hijos

Lo que haremos es agregar un Listener o escuchador al DOM como tal y luego iremos detectando al elemento que deseamos que decencadena el evento


function flujoEventos(e) {
  console.log(
    `Hola te saluda ${this} el click lo originó ${e.target.className}`
  );
  //e.stopPropagation();
}

document.addEventListener("click", (e) => {
  
  //matches es para buscar un selector valido
  //este if dara true cuando se precion el elemento div que se encuentradentro de la clase .eventos-flujo div y esto detonara una funcion 
  if (e.target.matches(".eventos-flujo div")) {
    flujoEventos(e);
  }
  if (e.target.matches(".eventos-flujo a")) {
    alert("Hola soy tu amigo y docente digital... Jonathan MirCha");
    e.preventDefault();
    //e.stopPropagation();
  }
}); */
/*


/////////////////////////////////////////////////////////////
